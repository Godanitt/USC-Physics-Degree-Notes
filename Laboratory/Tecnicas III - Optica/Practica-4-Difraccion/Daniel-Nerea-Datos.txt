# -*- coding: utf-8 -*-
"""
Created on Tue Mar  5 16:21:38 2024

@author: danie
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import scipy.constants as cte

def I(beta):
    I=(np.sin(beta)/beta)**2
    return I

def beta(a,l,theta):
    beta=(np.pi*a/l)*(np.sin(theta))
    return beta

def lineal(x,a,b):
    y = a+b*x 
    return y

def regresion_lineal(x,y):
    a,b=curve_fit(lineal,x,y,maxfev=5000)[0]
    return a,b

def plotea(x,y,a3,b3):
    plt.figure()
    plt.plot(x,y,".",color="red")
    u=np.linspace(min(x),max(x),20)
    v=lineal(u,a3,b3)
    plt.plot(u,v,color="blue")



lamb=632.8*10**(-9) #nm

#%% 
# -------- PRIMERA FENDA --------------------

z1=192  
z2=201
z3=236.5
z4=265
z5=339

z1=np.array([192,201,236.5,265,339])*10**(-2)

n1=np.array([-3,-2,-1,1,2,3])
L1=np.array([-5.3,-3.8,-2.1,2.3,3.9,5.3])*10**(-2)  #192
n2=np.array([-4,-3,-2,-1,1,2,3,4])
L2=np.array([-8.8,-7.2,-5.7,-4.1,-2.4,2.3,3.9,5.6,7.2,8.8])*10**(-2)  #201
n3=np.array([-3,-2,-1,1,2,3])
L3=np.array([-6.7,-4.8,-2.8,2.8,4.7,6.6])*10**(-2)  #236
n4=np.array([-4,-3,-2,-1,1,2,3,4])
L4=np.array([-9.5,-7.5,-5.4,-3.2,3.1,5.2,7.5,9.5])*10**(-2)  #265
n5=np.array([-3,-2,-1,1,2,3])
L5=np.array([-9.5,-6.7,-4.1,4.0,6.7,9.5])*10**(-2)  #339

#%%
# -------- SEGUNDA FENDA --------------------

#fenda 2
z21=167.5
z22=199
z23=247
z24=283.5
z25=339
z2=np.array([167.5,199,247,283.5,339])*10**(-2)

n1=np.array([-4,-3,-2,-1,1,2,3,4])
L1=np.array([-3,-2.3,-1.7,-1,1,1.6,2.3,3.1]) #167.5
n2=np.array([-4,-3,-2,-1,1,2,3,4])
L2=np.array([-3,-2.3,-1.6,-1,1,1.6,2.3,3]) #199
n3=np.array([-4,-3,-2,-1,1,2,3,4])
L3=np.array([-4.5,-3.5,-2.4,-1.6,1.5,2.4,3.5,4.5]) #247
n4=np.array([-4,-3,-2,-1,1,2,3,4])
L4=np.array([-5.1,-3.9,-2.7,-1.6,1.7,2.8,3.9,5.1]) #283.5
n5=np.array([-4,-3,-2,-1,1,2,3,4])
L5=np.array([-6.2,-4.8,-3.4,-2,2,3.4,4.7,6.2]) #339

n=np.array([-4,-3,-2,-1,1,2,3,4])
L=np.array([L1,L2,L3,L4,L5])

a2=np.array([])
b2=np.array([])
for i in range(len(z2)):
    x=L[i]/z2[i]
    a,b=regresion_lineal(x,n)
    a2=np.append(a2,a)
    b2=np.append(b2,b)
    plotea(x,n,a,b)

D=np.array([])
for i in range(len(b2)):
    D=np.append(D,lamb*z2[i]/b2[i])
    
print(D*10**(6))
#%%
teorico=np.array([9*0.0005/50,13*0.0005/50,])*10**6

print(teorico," micras")